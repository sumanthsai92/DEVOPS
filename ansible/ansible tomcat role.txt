create one ansible server and node server:

ansible server:

pwd

hostname

hostname -I

uname -a

cat /etc/hosts

cat /etc/os-release

ansible

ansible-galaxy init tomcat --to create tomcat role

ls -lrt

tree

apt update && apt install tree -y

pwd

hostname

ls -lrta

tree

sudo mv web.yaml /opt/


sudo mv user.yaml /opt/


ls -lrt

tree

touch tomcat-setup.yml

ls -lrt

vi tomcat-setup.yml

press i

---
-name: Tomcat deployment playbook
 hosts: app 
 become: yes
 vars:
    tomcat_var:8.5.84 --this will be change check onces in online
    ui_manager_user: manager
    ui_manager_pass: StrongmanagerPassw3rd
    ui_manager_user: admin
    ui_manager_pass: StrongmanagerPassw3rd
 roles:
   -tomcat

press esc

:wq

cat tomcat-setup.yml

tree

vi tomcat/defaults/main.yml

press i

---
tomcat_archive_url: https://archive.apache.org/dist/tomcat/tomcat-8/v{{ tomcat_ver }}/bin/apache-tomcat-{{ tomcat_ver }}.tar.gz
tomcat_archive_dest: /tmp/apache-tomcat-{{ tomcat_ver }}.tar.gz

press esc

:wq

cp -pvr tomcat/var/main.yml tomcat/vars/Debian.yml

cp -pvr tomcat/var/main.yml tomcat/vars/RedHat.yml

tree

vi tomcat/vars/Debian.yml

press i

---
JAVA_HOME: /usr/lib/jvm/default-java

press esc 

:wq

vi tomcat/vars/RedHat.yml


press i

---
JAVA_HOME: /usr/lib/jvm/jre

press esc 

:wq

tree

vi tomcat/handlers/main.yml

press i

name: restart tomcat
  service:
    name: tomcat
    state: restarted

press esc

:wq

cd tomcat/templates/

pwd

ls -lrt

touch context.xml.j2 tomcat-users.xml.j2 tomcat.service.j2

ls -lrt

vi context.xml.j2

press i

<?xml version="1.0" encoding="UTF-8"?>
<Context antiResourceLocking="false" privileged="true" >
</Context>

press esc

:wq

    
vi tomcat-users.xml.j2

<?xml version="1.0" encoding="UTF-8"?>
<tomcat-users xmlns="http://tomcat.apache.org/xml"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd"
              version="1.0">

<role rolename="manager-gui" />
<user username="{{ ui_manager_user }}" password="{{ ui_manager_pass }}" roles="manager-gui" />

<role rolename="admin-gui" />
<user username="{{ ui_admin_username }}" password="{{ ui_admin_pass }}" roles="manager-gui,admin-gui" />
</tomcat-users>

press esc 

:wq

vi tomcat.service.j2

press i

[Unit]
Description=Tomcat
After=syslog.target network.target

[Service]
Type=forking

User=tomcat
Group=tomcat

Environment=JAVA_HOME={{ JAVA_HOME }}
Environment='JAVA_OPTS=-Djava.awt.headless=true'

Environment=CATALINA_HOME=/usr/share/tomcat
Environment=CATALINA_BASE=/usr/share/tomcat
Environment=CATALINA_PID=/usr/share/tomcat/temp/tomcat.pid

ExecStart=/usr/share/tomcat/bin/catalina.sh start
ExecStop=/usr/share/tomcat/bin/catalina.sh stop

[Install]
WantedBy=multi-user.target

press esc

:wq

touch main.yaml tomcat-setup-Debian.yml tomcat-setup-RedHat.yml

vi main.yaml

press i

---
- name: Add the OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- include_tasks: "tomcat-setup-{{ ansible_os_family }}.yml"

press esc 

:wq

vi tomcat-setup-Debian.yml

press i

- name: Ensure the system can use the HTTPS transport for APT.
  stat:
    path: /usr/lib/apt/methods/https
  register: apt_https_transport

- name: Install APT HTTPS transport.
  apt:
    name: "apt-transport-https"
    state: present
    update_cache: yes
  when: not apt_https_transport.stat.exists

- name: Install basic packages
  package:
    name: ['vim','aptitude','bash-completion','tmux','tree','htop','wget','unzip','curl','git']
    state: present
    update_cache: yes

- name: Install Default Java (Debian/Ubuntu)
  apt:
    name: default-jdk
    state: present

- name: Add tomcat group
  group:
    name: tomcat

- name: Add "tomcat" user
  user:
    name: tomcat
    group: tomcat
    home: /usr/share/tomcat
    createhome: no
    system: yes

- name: Download Tomcat
  get_url:
    url: "{{ tomcat_archive_url }}"
    dest: "{{ tomcat_archive_dest }}"

- name: Create a tomcat directory
  file:
    path: /usr/share/tomcat
    state: directory
    owner: tomcat
    group: tomcat

- name: Extract tomcat archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: /usr/share/tomcat
    owner: tomcat
    group: tomcat
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: /usr/share/tomcat/bin

- name: Copy tomcat service file
  template:
    src: templates/tomcat.service.j2
    dest: /etc/systemd/system/tomcat.service
  when: ansible_service_mgr == "systemd"

- name: Start and enable tomcat
  service:
    daemon_reload: yes
    name: tomcat
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"
- name: Set UI access credentials
  template:
    src: tomcat-users.xml.j2
    dest: /usr/share/tomcat/conf/tomcat-users.xml
  notify: restart tomcat

- name: Allow access to Manager and Host Manager apps from any IP
  template:
    src: context.xml.j2 
    dest: "{{ item }}"
  with_items:
    - /usr/share/tomcat/webapps/host-manager/META-INF/context.xml
    - /usr/share/tomcat/webapps/manager/META-INF/context.xml
  notify: restart tomcat

press esc 

:wq

vi tomcat-setup-RedHat.yml

press i

- name: Add EPEL repository
  yum:
    name: epel-release
    state: present

- name: Install basic packages
  package:
    name: ['vim','bash-completion','tmux','tree','htop','wget','unzip','curl','git']
    state: present

- name: Install Java 8 CentOS
  yum:
    name: java-1.8.0-openjdk
    state: present

- name: Add tomcat group
  group:
    name: tomcat

- name: Add "tomcat" user
  user:
    name: tomcat
    group: tomcat
    home: /usr/share/tomcat
    createhome: no
    system: yes

- name: Download Tomcat
  get_url:
    url: "{{ tomcat_archive_url }}"
    dest: "{{ tomcat_archive_dest }}"

- name: Create a tomcat directory
  file:
    path: /usr/share/tomcat
    state: directory
    owner: tomcat
    group: tomcat

- name: Extract tomcat archive
  unarchive:
    src: "{{ tomcat_archive_dest }}"
    dest: /usr/share/tomcat
    owner: tomcat
    group: tomcat
    remote_src: yes
    extra_opts: "--strip-components=1"
    creates: /usr/share/tomcat/bin

- name: Copy tomcat service file
  template:
    src: templates/tomcat.service.j2
    dest: /etc/systemd/system/tomcat.service
  when: ansible_service_mgr == "systemd"

- name: Start and enable tomcat
  service:
    daemon_reload: yes
    name: tomcat
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"

- name: Start and enable firewalld
  service:
    name: firewalld
    state: started
    enabled: yes
  when: ansible_service_mgr == "systemd"

- name: Open tomcat port on the firewall
  firewalld:
    port: 8080/tcp
    permanent: true
    state: enabled
    immediate: yes
  when: ansible_service_mgr == "systemd"

- name: Set UI access credentials
  template:
    src: tomcat-users.xml.j2
    dest: /usr/share/tomcat/conf/tomcat-users.xml
  notify: restart tomcat

- name: Allow access to Manager and Host Manager apps from any IP
  template:
    src: context.xml.j2 
    dest: "{{ item }}"
  with_items:
    - /usr/share/tomcat/webapps/host-manager/META-INF/context.xml
    - /usr/share/tomcat/webapps/manager/META-INF/context.xml
  notify: restart tomcat

press esc

:wq

----------------------------------------------------
node server:

pwd 

hostname 

hostname -I ---take ip 

----------------------------------------------------
ansible server:


vi /etc/ansible/hosts

[web]
ip address of ansible server paste here

-----------------------------------------------------
node server:

ps -aux | grep tomcat


systemctl status tomcat.service

sudo grep tomcat /etc/passwd/etc/shadow

------------------------------------------------------

ansible server :

pwd

tree

ansible-playbook --syntax tomcat-setup.yml

ansible-playbook tomcat-setup.yml

------------------------------------------------------
node server :

sudo grep tomcat /etc/passwd/etc/shadow

java --version

systemctl status tomcat.service









